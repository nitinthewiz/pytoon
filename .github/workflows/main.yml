name: Build animation

on:
  # push:
  #   branches:
  #     - self-hosted-runner
  workflow_dispatch:
    inputs:
      audio_input:
        description: 'The audio file name to use'
        required: false
        default: 'speech.mp3'  

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip' # caching pip dependencies - testing this instead of actions/cache

    - name: Install pytoon
      run: |
        python -m pip install --upgrade pip
        # pip install -r requirements.txt
        pip install pytoon 
    
    - name: Install moviepy and audioop
      run: |
        pip install moviepy==1.0.3 audioop-lts==0.2.1

    - name: Install dependencies
      run: |
        python -m nltk.downloader punkt averaged_perceptron_tagger averaged_perceptron_tagger_eng cmudict words
    
    # - name: Download audio file if it's a URL and save it as speech.mp3 
    #   run: |
    #     if (${{ inputs.audio_input }} -like "http*") {
    #       Invoke-WebRequest -Uri ${{ inputs.audio_input }} -OutFile "speech.mp3"
    #     }

    # - name: Setup MinIO client
    #   uses: yakubique/setup-minio-cli@v1
    #   with:
    #     use_cache: true
    # - name: Test MinIO client
    #   run: |
    #     mc --help

    # - name: Download from MinIO if audio_input is a URL 
    #   # if: startsWith(inputs.audio_input, 'http')
    #   uses: yakubique/minio-download@v1.1.1
    #   with:
    #     endpoint: ${{ secrets.MINIO_ENDPOINT }}
    #     access_key: ${{ secrets.MINIO_ACCESS_KEY }}
    #     secret_key: ${{ secrets.MINIO_SECRET_KEY }}
    #     bucket: ${{ secrets.MINIO_BUCKET_NAME }}
    #     # Leading slash is required
    #     source: '/${{ inputs.audio_input }}'
    #     target: './speech.mp3'
    #     insecure: true

    ### MinIO mc has already been downloaded and installed on self-hosted runner

    - name: Authenticate MinIO client 
      if: ${{ !startsWith(inputs.audio_input, 'speech.mp3') }}
      run: |
        ${{ secrets.MINIO_MC_PATH }}\mc alias set myminio ${{ secrets.MINIO_ENDPOINT }} ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }} --insecure

    - name: Download audio_input using MinIO mc 
      if: ${{ !startsWith(inputs.audio_input, 'speech.mp3') }}
      run: |
        ${{ secrets.MINIO_MC_PATH }}\mc get myminio/${{ secrets.MINIO_BUCKET_NAME }}/${{ inputs.audio_input }} ./speech.mp3

    - name: Run pytoon
      run: |
        python main.py


    - name: Upload animation to github actions results
      uses: actions/upload-artifact@v4
      with:
        name: animation.mp4
        path: animation.mp4
    
    # - name: Read file contents
    #     if: ${{ success() }}
    #     id: links_file
    #     uses: andstor/file-reader-action@v1
    #     with:
    #       path: animation.mp4

    # - name: Upload links file to telegram
    #     if: ${{ success() }}
    #     run: C:\Users\khann\scoop\apps\pingme\0.2.0\pingme.exe telegram --channel="$env:TELEGRAM_AUTOMEDIA_NEW_VIDEOS_CHAT_ID" --token="$env:TELEGRAM_BOT_API_KEY" --msg="$env:MESSAGE"
    #     env:
    #       TELEGRAM_BOT_API_KEY: ${{secrets.TELEGRAM_BOT_API_KEY}}
    #       TELEGRAM_AUTOMEDIA_NEW_VIDEOS_CHAT_ID: ${{secrets.TELEGRAM_AUTOMEDIA_NEW_VIDEOS_CHAT_ID}}
    #       MESSAGE: "The links for today - ${{steps.links_file.outputs.contents}}"

    - name: Read file contents
      if: ${{ success() }}
      id: links_file
      uses: andstor/file-reader-action@v1
      with:
        path: animation.mp4

    - name: Upload links file to telegram
      if: ${{ success() }}
      uses: nyaruta/tg-file-action@v0.2.0
      with:
        chat-id: ${{secrets.TELEGRAM_AUTOMEDIA_NEW_VIDEOS_CHAT_ID}}
        files: |
          animation.mp4
        BOT_TOKEN: ${{ secrets.TELEGRAM_AM_NEW_MEDIA_BOT_TOKEN }}